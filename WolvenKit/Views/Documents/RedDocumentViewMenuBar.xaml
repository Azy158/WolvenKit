<reactiveUi:ReactiveUserControl
    x:Class="WolvenKit.Views.Documents.RedDocumentViewMenuBar"
    x:TypeArguments="documents:RedDocumentViewToolbarModel"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:reactiveUi="http://reactiveui.net"
    xmlns:documents="clr-namespace:WolvenKit.App.ViewModels.Documents;assembly=WolvenKit.App"
    xmlns:converters="clr-namespace:WolvenKit.Converters"
    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
    xmlns:hc="https://handyorg.github.io/handycontrol"
    mc:Ignorable="d"
    d:DesignHeight="30"
    d:DesignWidth="800"
    x:Name="RedDocumentViewToolbarControl">

    <Grid>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <Grid.Resources>

            <converters:HasMenuChildrenVisibilityConverter x:Key="HasMenuChildrenVisibilityConverter" />

            <!-- styles the whole menu bar -->
            <Style
                x:Key="MenuStyle"
                TargetType="{x:Type Menu}">
                <Setter Property="Background" Value="{StaticResource BackgroundColor_Frame_Background}" />
                <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey1}" />
                <Setter Property="Height" Value="29" />
                <Setter Property="Margin" Value="0" />
            </Style>

            <!-- Editor Modes & Toggle -->
            <Style
                x:Key="EditorModeDisplayStyle"
                TargetType="{x:Type MenuItem}"
                BasedOn="{StaticResource WolvenKitToolBarItem}">
                <Setter Property="Background" Value="{StaticResource BackgroundColor_Cyan}" />
                <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Cyan}" />
                <Setter Property="Margin" Value="0" />
                <Setter Property="Padding" Value="8" />
            </Style>

            <Style
                x:Key="WolvenKitToolBarItemWithChildren"
                TargetType="{x:Type MenuItem}"
                BasedOn="{StaticResource WolvenKitToolBarItem}">
                <Setter Property="Visibility" Value="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource HasMenuChildrenVisibilityConverter}}" />
            </Style>

            <!-- Menu Item Style (in dropdown) -->
            <Style
                x:Key="WolvenKitNestedMenuItemStyle"
                TargetType="{x:Type MenuItem}"
                BasedOn="{StaticResource WolvenKitToolBarItem}">
                <Setter Property="BorderBrush" Value="{StaticResource BackgroundColor_Frame_Background}" />
                <Setter Property="Height" Value="25" />
                <Setter Property="Margin" Value="2,0" />
                <Setter Property="Padding" Value="2,6,0,6" />
                <Style.Triggers>
                    <DataTrigger
                        Binding="{Binding Path=IsEnabled,
                                          RelativeSource={RelativeSource Self}}"
                        Value="False">
                        <Setter Property="Background" Value="{StaticResource BackgroundColor_Button_Inactive}" />
                        <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey_Dark}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- ============================================================== -->
            <!-- Visibility by file type -->
            <!-- ============================================================== -->

            <!-- menu item: Mesh -->
            <Style
                x:Key="MenuItemInMeshFileStyle"
                TargetType="{x:Type MenuItem}"
                BasedOn="{StaticResource WolvenKitNestedMenuItemStyle}">
                <Setter Property="Visibility" Value="Collapsed" />
                <Style.Triggers>
                    <DataTrigger
                        Binding="{Binding Path=ContentType,
                                          UpdateSourceTrigger=PropertyChanged}"
                        Value="{x:Static documents:RedDocumentItemType.Mesh}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- toolbar button: cleanup (mesh or json) -->
            <Style
                x:Key="CleanupMenuVisibilityStyle"
                TargetType="{x:Type MenuItem}"
                BasedOn="{StaticResource WolvenKitToolBarItemWithChildren}">
                <Setter Property="Visibility" Value="Collapsed" />
                <Style.Triggers>
                    <DataTrigger
                        Binding="{Binding Path=ContentType,
                                          UpdateSourceTrigger=PropertyChanged}"
                        Value="{x:Static documents:RedDocumentItemType.Mesh}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding Path=ContentType,
                                          UpdateSourceTrigger=PropertyChanged}"
                        Value="{x:Static documents:RedDocumentItemType.Json}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- toolbar button: (mesh or mi) -->
            <Style
                x:Key="ToolbarItemInMaterialFileStyle"
                TargetType="{x:Type MenuItem}"
                BasedOn="{StaticResource WolvenKitToolBarItemWithChildren}">
                <Setter Property="Visibility" Value="Collapsed" />
                <Style.Triggers>
                    <DataTrigger
                        Binding="{Binding Path=HasItems,
                                          RelativeSource={RelativeSource Self}}"
                        Value="True">
                        <Setter Property="FlowDirection">
                            <Setter.Value>
                                <FlowDirection>RightToLeft</FlowDirection>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Icon">
                            <Setter.Value>
                                <iconPacks:PackIconMaterial
                                    Kind="ChevronDown"
                                    Width="8"
                                    Height="7"
                                    Margin="6,2,0,0" />
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding Path=ContentType,
                                          UpdateSourceTrigger=PropertyChanged}"
                        Value="{x:Static documents:RedDocumentItemType.Mi}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding Path=ContentType,
                                          UpdateSourceTrigger=PropertyChanged}"
                        Value="{x:Static documents:RedDocumentItemType.Mlsetup}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding Path=ContentType,
                                          UpdateSourceTrigger=PropertyChanged}"
                        Value="{x:Static documents:RedDocumentItemType.Mesh}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding Path=ContentType,
                                          UpdateSourceTrigger=PropertyChanged}"
                        Value="{x:Static documents:RedDocumentItemType.Mlsetup}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- toolbar button: (mesh or mi) -->
            <Style
                x:Key="ToolbarItemInAppFileStyle"
                TargetType="{x:Type MenuItem}"
                BasedOn="{StaticResource WolvenKitToolBarItemWithChildren}">
                <Setter Property="Visibility" Value="Collapsed" />
                <Style.Triggers>
                    <DataTrigger
                        Binding="{Binding Path=ContentType,
                                          UpdateSourceTrigger=PropertyChanged}"
                        Value="{x:Static documents:RedDocumentItemType.App}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- menu item: JSON -->
            <Style
                x:Key="MenuItemInJsonFileStyle"
                TargetType="{x:Type MenuItem}"
                BasedOn="{StaticResource WolvenKitNestedMenuItemStyle}">
                <Setter Property="Visibility" Value="Collapsed" />
                <Style.Triggers>
                    <DataTrigger
                        Binding="{Binding Path=ContentType,
                                          UpdateSourceTrigger=PropertyChanged}"
                        Value="{x:Static documents:RedDocumentItemType.Json}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- menu item: .app -->
            <Style
                x:Key="MenuItemInAppFileStyle"
                TargetType="{x:Type MenuItem}"
                BasedOn="{StaticResource WolvenKitNestedMenuItemStyle}">
                <Setter Property="Visibility" Value="Collapsed" />
                <Style.Triggers>
                    <DataTrigger
                        Binding="{Binding Path=ContentType,
                                          UpdateSourceTrigger=PropertyChanged}"
                        Value="{x:Static documents:RedDocumentItemType.App}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- ============================================================== -->

            <Style
                x:Key="ShowInMeshFileStyle"
                TargetType="{x:Type MenuItem}"
                BasedOn="{StaticResource WolvenKitNestedMenuItemStyle}">
                <Setter Property="Visibility" Value="Collapsed" />
                <Style.Triggers>
                    <DataTrigger
                        Binding="{Binding Path=ContentType}"
                        Value="{x:Static documents:RedDocumentItemType.Mesh}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style
                x:Key="EditorModeDisplayStyle_Yellow"
                TargetType="{x:Type MenuItem}"
                BasedOn="{StaticResource EditorModeDisplayStyle}">
                <Setter Property="Background" Value="{StaticResource BackgroundColor_Yellow}" />
                <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Yellow}" />
            </Style>
            <Style
                x:Key="EditorModeDisplayStyle_Red"
                TargetType="{x:Type MenuItem}"
                BasedOn="{StaticResource EditorModeDisplayStyle}">
                <Setter Property="Background" Value="{StaticResource BackgroundColor_Red}" />
                <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Red}" />
            </Style>


            <Style
                x:Key="EditorModeParentDisplayStyle"
                TargetType="{x:Type MenuItem}">
                <Setter Property="Header" Value="Editor Mode" />
                <Setter Property="Margin" Value="0" />
                <Setter Property="Opacity" Value="50" />
                <Setter Property="Padding" Value="5" />
                <Style.Triggers>
                    <DataTrigger
                        Binding="{Binding Path=EditorLevel}"
                        Value="Easy">
                        <Setter Property="Background" Value="{StaticResource BackgroundColor_Cyan}" />
                        <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Cyan}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding Path=EditorLevel}"
                        Value="Default">
                        <Setter Property="Background" Value="{StaticResource BackgroundColor_Yellow}" />
                        <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Yellow}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding Path=EditorLevel}"
                        Value="Advanced">
                        <Setter Property="Background" Value="{StaticResource BackgroundColor_Red}" />
                        <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Red}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

        </Grid.Resources>

        <Menu
            x:Name="MenuBar"
            Style="{StaticResource MenuStyle}"
            KeyDown="OnKeystateChanged"
            KeyUp="OnKeystateChanged"
            ContextMenuOpening="OnMenuOpened"
            ContextMenuClosing="OnMenuClosed">

            <MenuItem
                Padding="0,5,2,2"
                Style="{StaticResource EditorModeParentDisplayStyle}"
                FlowDirection="RightToLeft">
                <MenuItem.Icon>
                    <iconPacks:PackIconMaterial
                        Kind="ChevronDown"
                        Width="8"
                        Height="7"
                        Margin="6,2,0,0" />
                </MenuItem.Icon>
                <MenuItem
                    Style="{StaticResource EditorModeDisplayStyle}"
                    Header="Easy"
                    Click="OnEditorModeClick_Easy" />
                <MenuItem
                    Style="{StaticResource EditorModeDisplayStyle_Yellow}"
                    Header="Default"
                    Click="OnEditorModeClick_Default" />
                <MenuItem
                    Style="{StaticResource EditorModeDisplayStyle_Red}"
                    Header="Advanced"
                    Click="OnEditorModeClick_Advanced" />
            </MenuItem>

            <!-- Mesh file: Materials menu -->
            <MenuItem
                Style="{StaticResource ToolbarItemInMaterialFileStyle}"
                Header="Materials"
                SubmenuOpened="OnMenuOpened"
                SubmenuClosed="OnMenuClosed">

                <!-- Generate missing materials -->
                <MenuItem
                    Visibility="{Binding Path=IsEnabled,
                                         RelativeSource={RelativeSource Self},
                                         Mode=OneWay,
                                         Converter={StaticResource BooleanToVisibilityConverter}}"
                    Header="Generate missing material entries"
                    Command="{Binding Path=GenerateMissingMaterialsCommand}"
                    Click="OnGenerateMissingMaterialsClick" />

                <!-- Scroll to material -->
                <MenuItem
                    Visibility="{Binding Path=IsEnabled,
                                         RelativeSource={RelativeSource Self},
                                         Mode=OneWay,
                                         Converter={StaticResource BooleanToVisibilityConverter}}"
                    Header="Scroll to material"
                    Command="{Binding Path=ScrollToMaterialCommand}" />

                <!-- Toggle 'EnableMask' material property -->
                <MenuItem
                    Visibility="{Binding Path=IsEnabled,
                                         RelativeSource={RelativeSource Self},
                                         Mode=OneWay,
                                         Converter={StaticResource BooleanToVisibilityConverter}}"
                    Header="Toggle 'EnableMask'"
                    Command="{Binding Path=ToggleEnableMaskCommand}" />

                <!-- Toggle 'isLocalInstance' -->
                <MenuItem
                    Visibility="{Binding Path=IsEnabled,
                                         RelativeSource={RelativeSource Self},
                                         Mode=OneWay,
                                         Converter={StaticResource BooleanToVisibilityConverter}}"
                    IsEnabled="{Binding Path=IsMaterialDefinition,
                                        Mode=OneWay}"
                    Header="Toggle 'IsLocalInstance'"
                    Command="{Binding Path=ToggleLocalInstanceCommand}" />

                <!-- Shift: "Add material dependencies" -->
                <MenuItem
                    Style="{StaticResource ShowInMeshFileStyle}"
                    Visibility="{Binding Path=IsEnabled,
                                         RelativeSource={RelativeSource Self},
                                         Mode=OneWay,
                                         Converter={StaticResource BooleanToVisibilityConverter}}"
                    Header="Add material dependencies"
                    ToolTip="Will run 'delete unused materials' first"
                    Command="{Binding Path=AddDependenciesCommand}" />

                <!-- Shift: "Add material dependencies (include basegame files)" -->
                <MenuItem
                    Style="{StaticResource ShowInMeshFileStyle}"
                    Visibility="{Binding Path=IsEnabled,
                                         RelativeSource={RelativeSource Self},
                                         Mode=OneWay,
                                         Converter={StaticResource BooleanToVisibilityConverter}}"
                    Header="Add material dependencies (include basegame files)"
                    ToolTip="Will run 'delete unused materials' first"
                    Command="{Binding Path=AddDependenciesFullCommand}" />

            </MenuItem>

            <!-- "Clean up" menu (.mesh / .json) -->
            <MenuItem
                Style="{StaticResource CleanupMenuVisibilityStyle}"
                Header="Clean up"
                SubmenuOpened="OnMenuOpened"
                SubmenuClosed="OnMenuClosed">

                <!-- Convert preload materials -->
                <MenuItem
                    Style="{StaticResource MenuItemInMeshFileStyle}"
                    Visibility="{Binding Path=IsEnabled,
                                         RelativeSource={RelativeSource Self},
                                         Mode=OneWay,
                                         Converter={StaticResource BooleanToVisibilityConverter}}"
                    Header="Convert preload materials to local"
                    Command="{Binding Path=ConvertPreloadMaterialsCommand}" />

                <!-- No shift: "Delete unused Materials" -->
                <MenuItem
                    Style="{StaticResource WolvenKitNestedMenuItemStyle}"
                    Visibility="{Binding Path=IsEnabled,
                                         RelativeSource={RelativeSource Self},
                                         Mode=OneWay,
                                         Converter={StaticResource BooleanToVisibilityConverter}}"
                    Header="Delete unused materials"
                    Command="{Binding Path=DeleteUnusedMaterialsCommand}" />

                <!-- Shift: "Clear all Materials" -->
                <MenuItem
                    Style="{StaticResource WolvenKitNestedMenuItemStyle}"
                    Visibility="{Binding Path=IsEnabled,
                                         RelativeSource={RelativeSource Self},
                                         Mode=OneWay,
                                         Converter={StaticResource BooleanToVisibilityConverter}}"
                    Header="Clear all materials"
                    Command="{Binding Path=ClearMaterialsCommand}" />

                <!-- "Delete empty submeshes" -->
                <MenuItem
                    Style="{StaticResource ShowInMeshFileStyle}"
                    Visibility="{Binding Path=IsEnabled,
                                         RelativeSource={RelativeSource Self},
                                         Converter={StaticResource BooleanToVisibilityConverter}}"
                    Header="Delete empty submeshes"
                    Command="{Binding Path=DeleteEmptySubmeshesCommand}" />

                <!-- JSON: Delete duplicate entries -->
                <MenuItem
                    Style="{StaticResource MenuItemInJsonFileStyle}"
                    Visibility="{Binding Path=IsEnabled,
                                         RelativeSource={RelativeSource Self},
                                         Mode=OneWay,
                                         Converter={StaticResource BooleanToVisibilityConverter}}"
                    Header="Delete duplicate entries"
                    Command="{Binding Path=DeleteDuplicateEntriesCommand}" />
            </MenuItem>

            <!-- Ent file: Appearances menu -->
            <MenuItem
                Style="{StaticResource ToolbarItemInAppFileStyle}"
                Header="Appearances">

                <!-- Regenerate controllers -->
                <MenuItem
                    Style="{StaticResource WolvenKitToolBarItem}"
                    Visibility="{Binding Path=IsEnabled,
                                         RelativeSource={RelativeSource Self},
                                         Mode=OneWay,
                                         Converter={StaticResource BooleanToVisibilityConverter}}"
                    Header="Regenerate visual controllers"
                    Command="{Binding Path=RegenerateVisualControllersCommand}" />

                <!-- Regenerate controllers -->
                <MenuItem
                    Style="{StaticResource MenuItemInAppFileStyle}"
                    Header="Change chunk view by component"
                    Click="OnChangeChunkMasksClick" />

            </MenuItem>

            <!-- CRUIDs -->
            <MenuItem
                Style="{StaticResource WolvenKitToolBarItem}"
                Visibility="{Binding Path=IsEnabled,
                                     RelativeSource={RelativeSource Self},
                                     Mode=OneWay,
                                     Converter={StaticResource BooleanToVisibilityConverter}}"
                Header="Generate CRUID"
                Command="{Binding Path=GenerateNewCruidCommand}" />

            <!-- Run file validation -->
            <MenuItem
                Padding="0,1,2,2"
                Style="{StaticResource WolvenKitToolBarItem}"
                Header="File Validation"
                Click="OnFileValidationClick">
                <MenuItem.Icon>
                    <iconPacks:PackIconMaterial
                        Kind="Play"
                        Width="13"
                        Height="16"
                        Margin="0,0,0,0"
                        Padding="0,2,0,5"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Top"
                        Foreground="{StaticResource WolvenKitGreen}" />
                </MenuItem.Icon>
            </MenuItem>


        </Menu>

        <hc:SearchBar
            x:Name="SearchBar"
            Grid.Column="1"
            Width="200"
            Height="16"
            Margin="3"
            HorizontalAlignment="Right"
            VerticalAlignment="Center"
            BorderThickness="0,0,0,0"
            Style="{StaticResource SearchBarStyle}"
            hc:InfoElement.Necessary="True"
            hc:InfoElement.Placeholder="Search"
            FlowDirection="LeftToRight"
            SearchStarted="SearchBar_OnSubmit"
            TextChanged="SearchBar_OnTextChanged" />

    </Grid>
</reactiveUi:ReactiveUserControl>